library IEEE;
use IEEE.std_logic_1164.all
use ieee.std_logic_unsigned.all;
use ieee.numeric_std.all;

entity ALU is
port(Clock : in std_logic;
A,B : in unsigned(7 downto 0);
student_id : in unsigned(3 downto 0);
OP : in unsigned(15 downto 0);
Neg: out std_logic;
R1: out unsigned(3 downto 0);
R2: out unsinged(3 dowto 0));
end ALU;
architecture calculation of ALU is
signal Reg1,Reg2,Result : unsigned(7 downto 0) := (others => '0');
signal Reg4 : unsigned(0 to 7);
begin
Reg1 <= A;
Reg2 <= B;
process(Clk, OP)
begin 
if(rising_edge(Clock))THEN
	case OP is
	WHEN "0000000000000001"=>
		--add
	WHEN "0000000000000010"=>
		--sub
	WHEN "0000000000000100"=>
		--inverse
	WHEN "0000000000001000"=>
		--NAND
	WHEN "0000000000010000"=>
	--NOR
	WHEN "0000000000100000"=>
	--OR
	WHEN "0000000001000000"=>
	--XOR
	WHEN "0000000100000000"=>
	--XNOR
	WHEN OTHERS =>
	--Don't care, do nothing
end case;
end if;
end process;
R1 <= Result(3 down to 0); -- splitting 8 bits into 2 4 bits
R2 <= Result(7 down to 4);
end calculation;